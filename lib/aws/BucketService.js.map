{"version":3,"sources":["../../src/aws/BucketService.js"],"names":["fs","require","AbstractService","UploadService","plugin","log","params","Bucket","bucketName","Key","zipFileKeyName","Body","createReadStream","getPathZipFileName","provider","request","then","result","e","console","message","process","exit","packageJsonKeyName","settings","packagePath","JSON","parse","toString","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAA/B;;IAEME,a;;;;;;;;;;;;;;;;;;;;;;;AAEF,qBAAKC,MAAL,CAAYC,GAAZ,CAAgB,4BAAhB;AAEMC,gBAAAA,M,GAAS;AACbC,kBAAAA,MAAM,EAAE,KAAKC,UADA;AAEbC,kBAAAA,GAAG,EAAE,KAAKC,cAFG;AAGbC,kBAAAA,IAAI,EAAEX,EAAE,CAACY,gBAAH,CAAoB,KAAKR,MAAL,CAAYS,kBAAZ,EAApB;AAHO,iB;iDAMR,KAAKC,QAAL,CAAcC,OAAd,CAAsB,IAAtB,EAA4B,WAA5B,EAAyCT,MAAzC,EACJU,IADI,CACC,UAACC,MAAD,EAAY;AAChB,kBAAA,KAAI,CAACb,MAAL,CAAYC,GAAZ,CAAgB,OAAhB;;AACA,yBAAOY,MAAP;AACD,iBAJI,WAKE,UAAAC,CAAC,EAAI;AACVC,kBAAAA,OAAO,CAACd,GAAR,CAAYa,CAAC,CAACE,OAAd;AACAC,kBAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD,iBARI,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYP,qBAAKlB,MAAL,CAAYC,GAAZ,CAAgB,kCAAhB;AAEMC,gBAAAA,M,GAAS;AACbC,kBAAAA,MAAM,EAAE,KAAKC,UADA;AAEbC,kBAAAA,GAAG,EAAE,KAAKc,kBAFG;AAGbZ,kBAAAA,IAAI,EAAEX,EAAE,CAACY,gBAAH,CAAoB,KAAKR,MAAL,CAAYoB,QAAZ,CAAqBC,WAAzC;AAHO,iB;kDAMR,KAAKX,QAAL,CAAcC,OAAd,CAAsB,IAAtB,EAA4B,WAA5B,EAAyCT,MAAzC,EACJU,IADI,CACC,UAACC,MAAD,EAAY;AAChB,kBAAA,MAAI,CAACb,MAAL,CAAYC,GAAZ,CAAgB,OAAhB;;AACA,yBAAOY,MAAP;AACD,iBAJI,WAKE,UAAAC,CAAC,EAAI;AACVC,kBAAAA,OAAO,CAACd,GAAR,CAAYa,CAAC,CAACE,OAAd;AACAC,kBAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD,iBARI,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYP,qBAAKlB,MAAL,CAAYC,GAAZ,CAAgB,yCAAhB;AAEMC,gBAAAA,M,GAAS;AACbC,kBAAAA,MAAM,EAAE,KAAKC,UADA;AAEbC,kBAAAA,GAAG,EAAE,KAAKc;AAFG,iB;kDAKR,KAAKT,QAAL,CAAcC,OAAd,CAAsB,IAAtB,EAA4B,WAA5B,EAAyCT,MAAzC,EACJU,IADI,CACC,UAACC,MAAD;AAAA,yBAAYS,IAAI,CAACC,KAAL,CAAWV,MAAM,CAACN,IAAP,CAAYiB,QAAZ,EAAX,CAAZ;AAAA,iBADD,WAEE,YAAM;AACX,kBAAA,MAAI,CAACxB,MAAL,CAAYC,GAAZ,CAAgB,2CAAhB;;AACA,yBAAO,IAAP;AACD,iBALI,C;;;;;;;;;;;;;;;;;;EAjDiBH,e;;AA0D5B2B,MAAM,CAACC,OAAP,GAAiB3B,aAAjB","sourcesContent":["const fs = require('fs');\nconst AbstractService = require('../AbstractService');\n\nclass UploadService extends AbstractService {\n  async uploadZipFile() {\n    this.plugin.log('Uploading layer package...');\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.zipFileKeyName,\n      Body: fs.createReadStream(this.plugin.getPathZipFileName())\n    };\n\n    return this.provider.request('S3', 'putObject', params)\n      .then((result) => {\n        this.plugin.log('OK...');\n        return result;\n      })\n      .catch(e => {\n        console.log(e.message);\n        process.exit(1);\n      });\n  }\n\n  async uploadPackageJson() {\n    this.plugin.log('Uploading remote package.json...');\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.packageJsonKeyName,\n      Body: fs.createReadStream(this.plugin.settings.packagePath)\n    };\n\n    return this.provider.request('S3', 'putObject', params)\n      .then((result) => {\n        this.plugin.log('OK...');\n        return result;\n      })\n      .catch(e => {\n        console.log(e.message);\n        process.exit(1);\n      });\n  }\n\n  async downloadPackageJson() {\n    this.plugin.log('Downloading package.json from bucket...');\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.packageJsonKeyName\n    };\n\n    return this.provider.request('S3', 'getObject', params)\n      .then((result) => JSON.parse(result.Body.toString()))\n      .catch(() => {\n        this.plugin.log('package.json does not exists at bucket...');\n        return null;\n      });\n  }\n}\n\nmodule.exports = UploadService;\n"],"file":"BucketService.js"}
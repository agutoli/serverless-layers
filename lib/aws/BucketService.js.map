{"version":3,"sources":["../../src/aws/BucketService.js"],"names":["fs","require","path","S3Key","AbstractService","UploadService","filename","value","join","plugin","getBucketLayersPath","test","process","platform","replace","log","params","Bucket","bucketName","Key","zipFileKeyName","Body","createReadStream","getPathZipFileName","awsRequest","checkError","then","result","body","file","getStream","keyPath","getKey","toString","e","message","dependenciesPath","settings","dependenceFilename","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\nconst S3Key = require('./S3Key');\nconst AbstractService = require('../AbstractService');\n\nclass UploadService extends AbstractService {\n  keyPath(filename) {\n    let value = path.join(this.plugin.getBucketLayersPath(), filename);\n    if (/^win/.test(process.platform)) {\n      value = value.replace(/\\\\/g, '/');\n    }\n    return value;\n  }\n\n  async uploadZipFile() {\n    this.plugin.log('Uploading layer package...');\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.zipFileKeyName,\n      Body: fs.createReadStream(this.plugin.getPathZipFileName())\n    };\n\n    return this.awsRequest('S3:putObject', params, { checkError: true })\n      .then((result) => {\n        this.plugin.log('OK...');\n        return result;\n      });\n  }\n\n  async putFile(filename, body) {\n    const file = new S3Key(filename);\n    this.plugin.log(`Uploading remote ${filename}...`);\n\n    let Body = body;\n\n    if (!body) {\n      Body = file.getStream();\n    }\n\n    const params = {\n      Body,\n      Bucket: this.bucketName,\n      Key: this.keyPath(file.getKey())\n    };\n\n    return this.awsRequest('S3:putObject', params, { checkError: true })\n      .then((result) => {\n        this.plugin.log('OK...');\n        return result;\n      });\n  }\n\n  async getFile(filename) {\n    const file = new S3Key(filename);\n    this.plugin.log(`Downloading ${file.getKey()} from bucket...`);\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.keyPath(file.getKey())\n    };\n\n    return this.awsRequest('S3:getObject', params)\n      .then((result) => result.Body.toString())\n      .catch((e) => {\n        this.plugin.log(`${filename} ${e.message}.`);\n        return null;\n      });\n  }\n\n  async uploadDependencesFile() {\n    const { dependenciesPath } = this.plugin.settings;\n\n    this.plugin.log(`Uploading remote ${dependenciesPath}...`);\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.dependenceFilename,\n      Body: fs.createReadStream(this.plugin.settings.dependenciesPath)\n    };\n\n    return this.awsRequest('S3:putObject', params, { checkError: true })\n      .then((result) => {\n        this.plugin.log('OK...');\n        return result;\n      });\n  }\n\n  async downloadDependencesFile() {\n    const { dependenciesPath } = this.plugin.settings;\n    this.plugin.log(`Downloading ${dependenciesPath} from bucket...`);\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.dependenceFilename\n    };\n\n    return this.awsRequest('S3:getObject', params)\n      .then((result) => result.Body.toString())\n      .catch((e) => {\n        this.plugin.log(`${dependenciesPath} ${e.message}.`);\n        return null;\n      });\n  }\n}\n\nmodule.exports = UploadService;\n"],"file":"BucketService.js"}
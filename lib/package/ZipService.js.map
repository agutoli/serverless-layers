{"version":3,"sources":["../../src/package/ZipService.js"],"names":["fs","require","path","chalk","mkdirp","crypto","fsExtra","archiver","MAX_LAYER_MB_SIZE","AbstractService","ZipService","hashName","functionName","Promise","resolve","reject","hash","createHash","input","createReadStream","on","chunk","update","digest","artifact","plugin","settings","mName","getManifestName","getChecksum","currentChecksum","bucketService","getFile","remoteChecksum","log","inverse","yellow","putFile","compileDir","zipFileName","getPathZipFileName","layersDir","join","process","cwd","existsSync","Error","oldCwd","output","createWriteStream","zip","create","MB","pointer","toFixed","err","chdir","pipe","directory","finalize","then","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst chalk = require('chalk');\nconst mkdirp = require('mkdirp');\nconst crypto = require('crypto');\nconst fsExtra = require('fs-extra');\nconst archiver = require('archiver');\n\nconst MAX_LAYER_MB_SIZE = 250;\n\nconst AbstractService = require('../AbstractService');\n\nclass ZipService extends AbstractService {\n  getManifestName(hashName) {\n    return `__meta__/manifest-zip-artifact__${this.functionName}.json`;\n  }\n\n  getChecksum(path) {\n    return new Promise(function (resolve, reject) {\n      const hash = crypto.createHash('md5');\n      const input = fs.createReadStream(path);\n\n      input.on('error', reject);\n\n      input.on('data', function (chunk) {\n        hash.update(chunk);\n      });\n\n      input.on('close', function () {\n        resolve(hash.digest('hex'));\n      });\n    });\n  }\n\n  async hasZipChanged() {\n    const { artifact } = this.plugin.settings;\n    const mName = this.getManifestName(artifact);\n\n    const currentChecksum = await this.getChecksum(artifact);\n    const remoteChecksum = await this.plugin.bucketService.getFile(mName);\n\n    // check if zip hash changed\n    if (remoteChecksum === currentChecksum) {\n      return false;\n    }\n\n    // It updates remote check sum\n    this.plugin.log(`${chalk.inverse.yellow(' Artifact changed ')}! Checksum=${currentChecksum}`);\n    await this.plugin.bucketService.putFile(mName, currentChecksum);\n\n    return true;\n  }\n\n  package() {\n    const { compileDir, artifact } = this.plugin.settings;\n    const zipFileName = this.plugin.getPathZipFileName();\n    const layersDir = path.join(process.cwd(), compileDir);\n\n    return new Promise((resolve, reject) => {\n      // it's a zip already\n      if (artifact) {\n        // It checks if file exists\n        if (!fs.existsSync(zipFileName)) {\n          throw Error(`Artifact not found \"${zipFileName}\".`);\n        }\n        return resolve();\n      }    \n  \n      const oldCwd = process.cwd();\n      const output = fs.createWriteStream(zipFileName);\n      const zip = archiver.create('zip');\n\n      output.on('close', () => {\n        const MB = (zip.pointer() / 1024 / 1024).toFixed(1);\n\n        if (MB > MAX_LAYER_MB_SIZE) {\n          this.plugin.log('Package error!');\n          throw new Error(\n            'Layers can\\'t exceed the unzipped deployment package size limit of 250 MB! \\n'\n          + 'Read more: https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\\n\\n'\n          );\n        }\n\n        this.plugin.log(`Created layer package ${zipFileName} (${MB} MB)`);\n        resolve();\n      });\n\n      zip.on('error', (err) => {\n        reject(err);\n        process.chdir(oldCwd);\n      });\n\n      process.chdir(layersDir);\n\n      zip.pipe(output);\n\n      zip.directory('layers', false);\n\n      zip.finalize()\n        .then(() => {\n          process.chdir(oldCwd);\n        });\n    });\n  }\n}\n\nmodule.exports = ZipService;\n"],"file":"ZipService.js"}
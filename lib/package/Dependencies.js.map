{"version":3,"file":"Dependencies.js","names":["fs","require","chalk","fsExtra","glob","path","mkdirp","execSync","copyFile","AbstractService","resolveFile","from","opts","Promise","resolve","reject","err","files","Dependencies","layersPackageDir","getLayerPackageDir","sync","settings","plugin","rooPath","join","dependenciesPath","filesToIgnore","filesToExclude","layerOptimization","cleanupPatterns","pattern","startsWith","substr","cwd","resolvedFiles","concat","forEach","filename","shouldBeIgnored","filter","x","length","warn","rmSync","force","recursive","cmd","output","env","process","maxBuffer","toString","filePath","fileName","init","existsSync","destFile","basename","copyErr","copyBeforeInstall","copyAfterInstall","log","inverse","yellow","renameFilename","runtimeDir","copyProjectFile","getDepsPath","index","customInstallationCommand","console","run","white","commands","runtimes","getCommands","packageManagerExtraArgs","packageManager","installCommand","bold","pathTo","to","pathFrom","copy","excludePatternFiles","service","patterns","error","exit","module","exports"],"sources":["../../src/package/Dependencies.js"],"sourcesContent":["const fs = require('fs');\nconst chalk = require('chalk');\nconst fsExtra = require('fs-extra');\nconst glob = require('glob');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\nconst { execSync } = require('child_process');\nconst copyFile = require('fs-copy-file'); // node v6.10.3 support\n\nconst AbstractService = require('../AbstractService');\n\nfunction resolveFile(from, opts = {}) {\n  return new Promise((resolve, reject) => {\n    glob(from, opts, (err, files) => {\n      if (err) return reject();\n      return resolve(files);\n    });\n  });\n}\n\nclass Dependencies extends AbstractService {\n  init() {\n    this.layersPackageDir = this.getLayerPackageDir();\n    return mkdirp.sync(this.layersPackageDir);\n  }\n\n  getDepsPath() {\n    const { settings } = this.plugin;\n    const rooPath = path.join(settings.path, settings.dependenciesPath);\n\n    return path.resolve(rooPath);\n  }\n\n  /**\n   * Implementing package pattern ignore\n   * https://github.com/agutoli/serverless-layers/issues/118\n   */\n  async excludePatternFiles() {\n    let filesToIgnore = [];\n    let filesToExclude = [];\n\n    /**\n     * Patterns allows you to define globs that will be excluded / included from the\n     * resulting artifact. If you wish to exclude files you can use a glob pattern prefixed\n     * with ! such as !exclude-me/**. Serverless will run the glob patterns in order so\n     * you can always re-include previously excluded files and directories.\n     *\n     * Reference: https://www.serverless.com/framework/docs/providers/aws/guide/packaging\n     */\n    for (let pattern of this.plugin.settings.layerOptimization.cleanupPatterns) {\n      if (pattern.startsWith('!')) {\n        const resolvedFiles = await resolveFile(pattern.substr(1), {\n          cwd: this.layersPackageDir\n        });\n        filesToIgnore = filesToIgnore.concat(resolvedFiles);\n      } else {\n        // change directory\n        const resolvedFiles = await resolveFile(pattern, {\n          cwd: this.layersPackageDir\n        });\n        filesToExclude = filesToExclude.concat(resolvedFiles);\n      }\n    }\n\n    filesToExclude.forEach((filename) => {\n      // check if folder or files are being ignored, and shouldn't be removed.\n      const shouldBeIgnored = filesToIgnore.filter(x => x.startsWith(filename)).length > 0;\n\n      if (!shouldBeIgnored) {\n        this.plugin.warn(`[layerOptimization.cleanupPatterns] Ignored: ${filename}`);\n        fs.rmSync(path.join(this.layersPackageDir, filename), {force: true, recursive: true});\n      }\n    });\n  }\n\n  async run(cmd) {\n    const output = execSync(cmd, {\n      cwd: this.layersPackageDir,\n      env: process.env,\n      maxBuffer: 1024 * 1024 * 500\n    }).toString();\n    return output;\n  }\n\n  copyProjectFile(filePath, fileName = null) {\n    this.init();\n\n    if (!fs.existsSync(filePath)) {\n      this.plugin.warn(`[warning] \"${filePath}\" file does not exists!`);\n      return true;\n    }\n\n    return new Promise((resolve) => {\n      const destFile = path.join(this.layersPackageDir, fileName || path.basename(filePath));\n      copyFile(filePath, destFile, (copyErr) => {\n        if (copyErr) throw copyErr;\n        return resolve();\n      });\n    });\n  }\n\n  async install() {\n    const { copyBeforeInstall, copyAfterInstall } = this.plugin.settings;\n\n    this.init();\n    this.plugin.log(`${chalk.inverse.yellow(' Changes identified ')}! Re-installing...`);\n\n    /**\n     * This is necessary because npm is\n     * not possible to specify a custom\n     * name for package.json.\n     */\n    let renameFilename = null;\n    if (this.plugin.settings.runtimeDir === 'nodejs') {\n      renameFilename = 'package.json';\n    }\n\n    await this.copyProjectFile(this.getDepsPath(), renameFilename);\n\n    for (const index in copyBeforeInstall) {\n      const filename = copyBeforeInstall[index];\n      await this.copyProjectFile(filename);\n    }\n\n    // custom commands\n    if (this.plugin.settings.customInstallationCommand) {\n      console.log(chalk.white(await this.run(this.plugin.settings.customInstallationCommand)));\n    } else {\n      const commands = this.plugin.runtimes.getCommands();\n      const {packageManagerExtraArgs, packageManager} = this.plugin.settings;\n      const installCommand = `${commands[packageManager]} ${packageManagerExtraArgs}`;\n      this.plugin.log(chalk.white.bold(installCommand));\n      console.log(chalk.white(await this.run(installCommand)));\n    }\n\n    for (const index in copyAfterInstall) {\n      const pathTo = copyAfterInstall[index].to;\n      const pathFrom = copyAfterInstall[index].from;\n\n      const [from] = await resolveFile(path.join(this.layersPackageDir, pathFrom));\n      const to = path.join(this.layersPackageDir, pathTo);\n\n      try {\n        await fsExtra.copy(from, to);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    // cleanup files\n    try {\n      await this.excludePatternFiles();\n    } catch(err) {\n      if (!this.plugin.service.package.patterns) {\n        this.plugin.warn(`[warning] package.patterns option is not set. @see https://www.serverless.com/framework/docs/providers/aws/guide/packaging`);\n      } else {\n        console.error(err);\n        process.exit(1);\n      }\n    }\n  }\n}\n\nmodule.exports = Dependencies;\n"],"mappings":"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"}
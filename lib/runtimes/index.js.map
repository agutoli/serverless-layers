{"version":3,"sources":["../../src/runtimes/index.js"],"names":["require","exec","ruby","nodejs","python","Runtimes","plugin","runtime","service","provider","error","process","exit","patterns","env","test","_runtime","log","isCompatibleVersion","then","data","isCompatible","version","replace","init","cmd","Promise","resolve","reject","err","stdout","out","inboundSettings","packagePath","console","warn","dependenciesPath","commands","hasDependenciesChanges","module","exports"],"mappings":";;;;;;;;;;;;;;eAAiBA,OAAO,CAAC,eAAD,C;IAAhBC,I,YAAAA,I;;AAER,IAAMC,IAAI,GAAGF,OAAO,CAAC,QAAD,CAApB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMI,MAAM,GAAGJ,OAAO,CAAC,UAAD,CAAtB;;IAEMK,Q;AACJ,oBAAYC,MAAZ,EAAoB;AAAA;;AAAA;AAClB,SAAKA,MAAL,GAAcA,MAAd;AADkB,QAGVC,OAHU,GAGE,KAAKD,MAAL,CAAYE,OAAZ,CAAoBC,QAHtB,CAGVF,OAHU;;AAKlB,QAAI,CAACA,OAAL,EAAc;AACZ,WAAKD,MAAL,CAAYI,KAAZ,CAAkB,uCAAlB;AACA,aAAOC,OAAO,CAACC,IAAR,CAAa,CAAb,CAAP;AACD;;AAED,QAAMC,QAAQ,GAAG;AACfT,MAAAA,MAAM,EAAE,CAAC,QAAD,EAAWA,MAAX,CADO;AAEfD,MAAAA,MAAM,EAAE,CAAC,MAAD,EAASA,MAAT,CAFO;AAGfD,MAAAA,IAAI,EAAE,CAAC,MAAD,EAASA,IAAT;AAHS,KAAjB;;AAMA,SAAK,IAAMY,GAAX,IAAkBD,QAAlB,EAA4B;AAC1B,UAAIA,QAAQ,CAACC,GAAD,CAAR,CAAc,CAAd,EAAiBC,IAAjB,CAAsBR,OAAtB,CAAJ,EAAoC;AAClC,aAAKS,QAAL,GAAgB,IAAIH,QAAQ,CAACC,GAAD,CAAR,CAAc,CAAd,CAAJ,CAAqB,IAArB,EAA2BP,OAA3B,EAAoCO,GAApC,CAAhB;AACA;AACD;AACF;;AAED,QAAI,CAAC,KAAKE,QAAV,EAAoB;AAClB,WAAKV,MAAL,CAAYW,GAAZ,aAAoBV,OAApB;AACA,aAAOI,OAAO,CAACC,IAAR,CAAa,CAAb,CAAP;AACD;;AAED,SAAKI,QAAL,CAAcE,mBAAd,CAAkCX,OAAlC,EACGY,IADH,CACQ,UAACC,IAAD,EAAU;AACd,UAAI,CAACA,IAAI,CAACC,YAAV,EAAwB;AACtB,QAAA,KAAI,CAACf,MAAL,CAAYI,KAAZ,CAAkB,+DAAlB;;AACA,QAAA,KAAI,CAACJ,MAAL,CAAYI,KAAZ,8DAAwEU,IAAI,CAACE,OAAL,CAAaC,OAAb,CAAqB,IAArB,EAA2B,EAA3B,CAAxE;;AACA,QAAA,KAAI,CAACjB,MAAL,CAAYI,KAAZ,CAAkB,iEAAlB;AACD;AACF,KAPH;AAQD;;;;2BAEM;AACL,WAAKM,QAAL,CAAcQ,IAAd;AACD;;;wBAEGC,G,EAAK;AACP,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC3B,QAAAA,IAAI,CAACwB,GAAD,EAAM,UAACI,GAAD,EAAMC,MAAN,EAAcC,GAAd,EAAsB;AAC9B,cAAIF,GAAJ,EAAS,OAAOD,MAAM,CAACC,GAAD,CAAb;AACT,iBAAOF,OAAO,CAACG,MAAM,IAAIC,GAAX,CAAd;AACD,SAHG,CAAJ;AAID,OALM,CAAP;AAMD;;;yCAEwC;AAAA,UAAtBC,eAAsB,uEAAJ,EAAI;;AACvC,UAAIA,eAAe,CAACC,WAApB,EAAiC;AAC/BC,QAAAA,OAAO,CAACC,IAAR,CAAa,uFAAb;AACAH,QAAAA,eAAe,CAACI,gBAAhB,GAAmCJ,eAAe,CAACC,WAAnD;AACD;;AACD,+BAAY,KAAKjB,QAAL,WAAZ,MAAsCgB,eAAtC;AACD;;;kCAEa;AACZ,aAAO,KAAKhB,QAAL,CAAcqB,QAArB;AACD;;;6CAEwB;AACvB,aAAO,KAAKrB,QAAL,CAAcsB,sBAAd,EAAP;AACD;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBnC,QAAjB","sourcesContent":["const { exec } = require('child_process');\n\nconst ruby = require('./ruby');\nconst nodejs = require('./nodejs');\nconst python = require('./python');\n\nclass Runtimes {\n  constructor(plugin) {\n    this.plugin = plugin;\n\n    const { runtime } = this.plugin.service.provider;\n\n    if (!runtime) {\n      this.plugin.error('service.provider.runtime is required!');\n      return process.exit(1);\n    }\n\n    const patterns = {\n      python: [/python/, python],\n      nodejs: [/node/, nodejs],\n      ruby: [/ruby/, ruby],\n    };\n\n    for (const env in patterns) {\n      if (patterns[env][0].test(runtime)) {\n        this._runtime = new patterns[env][1](this, runtime, env);\n        break;\n      }\n    }\n\n    if (!this._runtime) {\n      this.plugin.log(`\"${runtime}\" runtime is not supported (yet).`);\n      return process.exit(1);\n    }\n\n    this._runtime.isCompatibleVersion(runtime)\n      .then((data) => {\n        if (!data.isCompatible) {\n          this.plugin.error('=============================================================');\n          this.plugin.error(`NOTE: You're currently using incompatible version [${data.version.replace('\\n', '')}]`);\n          this.plugin.error('=============================================================\\n');\n        }\n      });\n  }\n\n  init() {\n    this._runtime.init();\n  }\n\n  run(cmd) {\n    return new Promise((resolve, reject) => {\n      exec(cmd, (err, stdout, out) => {\n        if (err) return reject(err);\n        return resolve(stdout || out);\n      });\n    });\n  }\n\n  getDefaultSettings(inboundSettings = {}) {\n    if (inboundSettings.packagePath) {\n      console.warn('WARN You should use \"dependenciesPath\" instead of the deprecated \"packagePath\" param.');\n      inboundSettings.dependenciesPath = inboundSettings.packagePath;\n    }\n    return { ...this._runtime.default, ...inboundSettings };\n  }\n\n  getCommands() {\n    return this._runtime.commands;\n  }\n\n  hasDependenciesChanges() {\n    return this._runtime.hasDependenciesChanges();\n  }\n}\n\nmodule.exports = Runtimes;\n"],"file":"index.js"}